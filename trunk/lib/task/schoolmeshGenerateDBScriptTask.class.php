<?php

/**
 * schoolmeshGenerateDBScriptTask class.
 *
 * @package    schoolmesh
 * @subpackage lib.task
 * @author     Loris Tissino
 * @license    GNU GPLv3 -- see license/gpl.txt for details
 */

class schoolmeshGenerateDBScriptTask extends sfBaseTask
{
  protected function configure()
  {

    $this->addOptions(array(
      new sfCommandOption('application', null, sfCommandOption::PARAMETER_REQUIRED, 'The application name', 'frontend'),
      new sfCommandOption('env', null, sfCommandOption::PARAMETER_REQUIRED, 'The environment', 'dev'),
      new sfCommandOption('connection', null, sfCommandOption::PARAMETER_REQUIRED, 'The connection name', 'propel'),
      // add your own options here
      new sfCommandOption('backupfile', null, sfCommandOption::PARAMETER_OPTIONAL, 'The file to write the backup to or read the backup from', '_BACKUPFILE_'),
    ));
    
    $this->addArguments(array(
      new sfCommandArgument('type', sfCommandArgument::REQUIRED, 'The type of script needed (init, backup, restore)'),
      new sfCommandArgument('scriptfile', sfCommandArgument::REQUIRED, 'The file to write the script to'),
    ));

    $this->namespace        = 'schoolmesh';
    $this->name             = 'generate-db-script';
    $this->briefDescription = 'Produces a script to use in order to backup the database, initialize it or restore it';
    $this->detailedDescription = <<<EOF
This script produces on the standard output the script used to connect to the database from the command line.
It can be useful for backups or other routines.
EOF;
  }

  protected function execute($arguments = array(), $options = array())
  {
    // initialize the database connection
    $databaseManager = new sfDatabaseManager($this->configuration);
    $connection = $databaseManager->getDatabase($options['connection'] ? $options['connection'] : null)->getConnection();

    // add your code here
    
    $validtypes=array('init', 'backup', 'restore');
    
    $type=$arguments['type'];
    if(!in_array($type, $validtypes))
    {
      throw new sfCommandArgumentsException(sprintf("Valid types are:\n- %s", implode("\n- ", $validtypes)));
    }
    
    $dbcm = new smDBConfManager($options['env']);
    
    $f=fopen($arguments['scriptfile'], 'w');
    fwrite($f, "#!/bin/bash\n");
    fwrite($f, "# This script was generated by the schoolmesh:generate-db-script task\n");
    fwrite($f, "# Edit it only if you know what you are doing\n");
    fwrite($f, "# \n");
    fwrite($f, sprintf("# %s script\n", $type));
    
    switch($type)
    {
      case 'init':
         fwrite($f, $dbcm->getInitCommand());
         break;
      case 'backup':
         fwrite($f, $dbcm->getBackupCommand($options['backupfile']));
         break;
      case 'restore':
         fwrite($f, $dbcm->getRestoreCommand($options['backupfile']));
         break;
    }
    
    fwrite($f, "\n");
    fclose($f);
    
    $this->logSection('file+', $arguments['scriptfile'], null, 'NOTICE');
  }

}
