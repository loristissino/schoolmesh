<?php

/**
 * schoolmeshRunUserChecksTasks class.
 *
 * @package    schoolmesh
 * @subpackage lib.task
 * @author     Loris Tissino
 * @license    GNU GPLv3 -- see license/gpl.txt for details
 */


class schoolmeshRunUserChecksTask extends sfBaseTask
{
  protected function configure()
  {

    $this->addOptions(array(
      new sfCommandOption('application', null, sfCommandOption::PARAMETER_REQUIRED, 'The application name'),
      new sfCommandOption('env', null, sfCommandOption::PARAMETER_REQUIRED, 'The environment', 'dev'),
      new sfCommandOption('connection', null, sfCommandOption::PARAMETER_REQUIRED, 'The connection name', 'propel'),
      // add your own options here
    ));
    
    $this->addArgument('scriptfile', sfCommandArgument::REQUIRED, 'The name of the script file to generate');

    $this->namespace        = 'schoolmesh';
    $this->name             = 'run-user-checks';
    $this->briefDescription = 'Run user checks from command line, generating a script file.';
    $this->detailedDescription = <<<EOF
This task will run the user checks on all accounts, updating info on db and generating a script.
EOF;
  }


  protected function execute($arguments = array(), $options = array())
  {
    // initialize the database connection
    $databaseManager = new sfDatabaseManager($this->configuration);
    $connection = $databaseManager->getDatabase($options['connection'] ? $options['connection'] : null)->getConnection();

    $this->scriptfile=$arguments['scriptfile'];
    
    if(file_exists($this->scriptfile))
    {
      $this->logSection('file', sprintf('File %s already exists.', $this->scriptfile) , null, 'ERROR');
      return 1;
    }
    
    if (!$this->handle=fopen($this->scriptfile, 'w'))
    {
      $this->logSection('file', sprintf('File %s not writable.', $this->scriptfile) , null, 'ERROR');
      return 2;
    }

    fwrite($this->handle, "#!/bin/bash -x\n");
    fwrite($this->handle, '# This script was automatically generated by SchoolMesh at ' . date('c') . "\n\n");

    // add your code here

    $profiles=sfGuardUserProfilePeer::retrieveAllSortedByLastName();
    
    $count=0;
    $size=sizeof($profiles);
    
    $availableAccounts=sfConfig::get('app_config_accounts');

    
    foreach($profiles as $profile)
    {
      $checkList = new CheckList();
      $profile->checkAccounts($availableAccounts, $checkList);
      
      if($checkList->getTotalResults(Check::FAILED)>0)
      {
        $messageType='ERROR';
      }
      elseif($checkList->getTotalResults(Check::WARNING)>0)
      {
        $messageType='COMMENT';
      }
      else
      {
        $messageType='INFO';
      }
      
      $this->logSection('user', sprintf('%s checked (%3.2f%%)', $profile->getUsername(), 100*(++$count/$size)), null, $messageType);
 
      foreach($checkList->getCommandLines() as $line)
      {
        fwrite($this->handle, $line . "\n");
      }
    }

    fclose($this->handle);
    $this->logSection('file+', $this->scriptfile, null, 'INFO');

  }

}
