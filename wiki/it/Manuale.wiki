#summary Uso di SchoolMesh - Introduzione
#labels Phase-Deploy

= Introduzione a SchoolMesh =

SchoolMesh è un'applicazione web pensata per gestire l'infrastruttura informatica di una scuola superiore. Lo sviluppo, ancora in corso, è basato sulle esigenze dell'Istituto Tecnico Commerciale "Odorico Mattiussi" di Pordenone. Per quanto possibile, però, si è cercato di renderla utilizzabile anche in altre scuole, con poche operazioni di configurazione/adattamento.

== Cosa si può fare con SchoolMesh ==

_(per ogni voce è indicata la fase di sviluppo: 0 progettazione, 1 proof of concept, 2 prototipizzazione, 3 alpha-testing, 4 beta-testing, 5-produzione)

Per ora lo sviluppo si è concentrato su due aspetti.

1. Integrazione delle diverse applicazioni server in uso nella scuola e per la scuola, con gestione il piuù possibile coordinata e centralizzata delle credenziali di accesso.

  * gestione degli utenti di sistema (home directory, quote disco, gruppi, cartelle condivise, acl sui file, ecc.) *3*
  * gestione dell'autenticazione (impostazione/reset delle password di Samba - in futuro anche tramite LDAP, informazioni su chi è on line, ecc.) *3*
  * gestione dell'accesso a Internet (abilitazione/disabilitazione da parte dei docenti) *3*
  * gestione degli account di sistemi remoti gestiti dalla scuola per le attività didattiche (in particolare _Google Apps_ per posta elettronica, siti e documenti condivisi, ecc., _Moodle_ per alcune attività di e-learning) *3*

2. Gestione di alcune attività via web:

 * completa del workflow del lavoro di un docente in una classe (piano di lavoro e relazione finale) *4*
 * gestione della documentazione relativa al sistema Qualità *0*
 * gestione del workflow del lavoro relativo ai progetti scolastici *1*

== Frontend, Backend, Command Line Interface ==

L'applicazione è divisa in tre parti:

1. *Frontend*: è l'applicazione con cui interagiscono la maggior parte degli utenti (studenti, docenti, dirigente scolastico, dsga, tecnici).

_L'applicazione di frontend è disponibile via browser all'URL `http://.../schoolmesh/index.php`_

2. *Backend*: è l'applicazione che serve per la configurazione di alcuni aspetti particolari che richiedono una maggiore delicatezza (es. quali campi devono comparire nei piani di lavoro).

_L'applicazione di backend è disponibile via browser all'URL `http://.../schoolmesh/backend.php`_

3. *Command Line Interface*: è l'interfaccia a riga di comando per lo svolgimento di alcune attività periodiche o di sistema. I comandi possono essere di due tipi:

  a) script bash, tutti con prefisso `schoolmesh_`, posti nella directory _/usr/local/bin_. (vedi [ManPage pagina man]).

  b) task di symfony, che possono essere eseguiti dalla directory del progetto

{{{
cd /var/schoolmesh
symfony test:unit
symfony schoolmesh:approve-workplans
}}}

== Ambienti di esecuzione ==

Per SchoolMesh, come è raccomandato per questo genere di progetti, sono impostati tre diversi _ambienti di esecuzione_:

1. *dev*: è l'ambiente di sviluppo (se sei uno sviluppatore PHP con un po' di esperienza con il framework Symfony e ti interessa collaborare contattaci)

_L'accesso all'ambiente di prova avviene puntando il browser all'URL `http://.../schoolmesh/frontend_dev.php` (o `http://.../schoolmesh/backend_dev.php` ed è consentito solo dalla macchina su cui gira il server web._

2. *test*: è l'ambiente in cui sono fatti funzionare i test automatizzati (_unit testing_ e _functional testing_)

3. *prod*: è l'ambiente di produzione, in cui sono presenti i dati veri che non dovrebbero essere toccati/danneggiati (e di cui bisogna fare il backup!)

_L'accesso all'ambiente di produzione avviene puntando il browser all'URL `http://.../schoolmesh/index.php` (o `http://.../schoolmesh/backend.php` ed è consentito da tutte le macchine._

Questo spiega il motivo per cui in fase di installazione sono stati creati tre database. In ambiente di produzione ne basterebbe uno. Nota che le istruzioni hanno fatto inserire i dati solo nel database di sviluppo. Per quello di test non ce n'è bisogno, perché i dati di prova vengono comunque ricaricati ogni volta. Per quello di produzione è bene che ci siano i dati reali.

== Utenti, gruppi, credenziali e permessi ==

I dati relativi agli utenti e ai gruppi sono memorizzati nel database. 

=== Utenti ===

Gli utenti di SchoolMesh sono quelli registrati nel proprio database. Per ogni utente possono essere attivati uno o più account "figli" che consentono l'uso delle risorse informatiche, interne ed esterne, della scuola.

L'applicazione consente di eseguire dei controlli automatici sulla coerenza (vedi sotto) tra dati del database e i dati degli account "figli" proponendo le operazioni da eseguire in caso di discordanza (ad esempio creazione dell'utente e della sua home directory).

Queste operazioni possono essere svolte (dagli utenti con la credenziale 'admin') in uno dei due modi seguenti:

  * facendo produrre a SchoolMesh uno script che dovrà essere eseguito dall'utente in una shell (tramite download o con _copia & incolla_)
  * delegando il server web ad eseguire i comandi necessari (al momento questa opzione è disabilitata di default)

=== Gruppi ===

SchoolMesh gestisce due tipi di gruppi di natura molto differente:

  # *Guardgroups*: sono i gruppi che servono all'attribuzione delle credenziali per l'uso dell'applicazione web; ad esempio, il gruppo `admin`, `teacher`, `office`, `schoolmaster` (un utente può fare parte di più _Guardgroups_) -- questi gruppi sono predefiniti nell'applicazione e non possono essere creati o modificati
  # *Teams*: sono i gruppi di utenti della normale vita scolastica come classi, consigli di classe, dipartimenti di materia, commissioni, gruppi di lavoro, ecc. (un utente può appartenere ad uno o più _team_ e deve avere all'interno del _team_ un ruolo, come coordinatore, segretario, componente, ecc.) -- team e ruoli possono essere definiti a piacere, ma alcuni vengono predisposti in maniera automatica (ad esempio, quelli dei consigli di classe)

Per i _team_ è previsto che vengano predisposti automaticamente delle cartelle condivise (ed eventualmente dei gruppi con Google Apps).

=== Credenziali ===

Nella terminologia di symfony, adottata anche in SchoolMesh, una credenziale è la facoltà che viene assegnata ad un utente o a un gruppo di visualizzare una certa pagina o eseguire una certa operazione tramite l'applicazione web.

Ad esempio, la credenziale _planning_ consente di accedere alla pagina per la preparazione del piano di lavoro, la credenziale _internet_ di abilitare/disabilitare l'accesso a Internet in un laboratorio, ecc.

Le credenziali possono essere associate direttamente ad un utente oppure ad un gruppo. Così, se _tizio_ appartiene al gruppo _teacher_ e il gruppo _teacher_ ha la credenziale _project_, _tizio_ avrà la credenziale _project_.

(Nota tecnica: in realtà, Symfony chiama _credenziale_ i permessi di cui dispone un utente correntemente autenticato, mentre parla di permessi per quanto riguarda in generale gli utenti. Per questo motivo, se si va a guardare nel database, esiste la tabella `sf_guard_permission`.)

=== Gestione degli account e sincronizzazione ===

Uno degli scopi principali di SchoolMesh è di consentire la gestione coerente degli account utente degli studenti e del personale docente e non docente della scuola.

Oltre agli account di SchoolMesh, che consentono l'accesso all'applicazione web, vi è infatti la necessità/possibilità di gestire:

  * account interni alla scuola, come ad esempio gli account Samba per l'autenticazione degli utenti nel dominio della scuola
  * account esterni, come quelli sulla piattaforma di e-learning Moodle e per la gestione di diverse attività web (posta elettronica, documenti e siti web condivisi, ecc.) offerti da Google con la sua _Google Apps Educational Edition_

Per questo motivo, SchoolMesh è un'applicazione strutturata per la gestione il più possibile sincronizzata di questi account, con un sistema modulare ed espandibile.

Per ogni utente, infatti, è possibile definire degli account "figli" dell'account principale (quello di SchoolMesh stesso) e a questo legato in maniera indissolubile (salvo delle eccezioni). Ciò che lega l'account principale con gli account figli è il medesimo _username_, che assume quindi un ruolo essenziale.

Gli account "figli" devono appartenere ad una delle tipologie riportate nella tabella seguente (eventualmente altre se ne potranno aggiungere):

|| *nome* || *tipo* || *descrizione* ||
|| _posix_ || interno || è l'account principale che consente ad un utente di avere una propria _home directory_; ad esso sono legate le quote disco, i permessi su file e directory, l'appartenenza ad uno o più gruppi posix, le _access control list_, ecc. ||
|| _shell_ || interno || è la possibilità che viene data ad un utente di accedere via terminale al server di autenticazione tramite SSH; presuppone l'esistenza di un account _posix_ non bloccato e con una shell appropriata (ad esempio (_bin/bash_) ||
|| _samba_ || interno || è la possibilità che viene data ad un utente di accedere ai calcolatori della rete interna mediante autenticazione SMB; presuppone l'esistenza di un account _posix_ (non bloccato?) e di un account Samba ||
|| _ldapnfs_ || interno || è la possibilità che viene data ad un utente di accedere ai calcolatori della rete interna mediante autenticazione LDAP e con condivisione di file via Network File System; presuppone l'esistenza di un account _posix_ (non bloccato?) ||
|| _googleapps_ || esterno || è un account gestito da Google per il dominio della scuola, nell'ambito del servizio _Google Apps Educational Edition_ ||
|| _moodle_ || esterno || è un account gestito dalla scuola, su server esterno, dedicato alle attività di e-learning ||

(Gli account esterni sono quelli per cui la sincronizzazione potrebbe non essere fatta in tempo reale: ad esempio, si potrebbe dover scaricare un file CSV con i dati aggiornati e caricarlo successivamente.)

Si noti che gli account "figli" di questo tipo sono registrati nel database interno di SchoolMesh (dove è descritto come dovrebbe essere il mondo, non come è effettivamente: per questo motivo sono necessari i controlli di coerenza).

La maggior parte degli utenti di SchoolMesh disporrà, tipicamente, almeno degli account _posix_, _samba_ e _moodle_, ma è importante notare che esistono importanti eccezioni a questa regola. Vediamo qualche esempio.

  # alcuni utenti _posix_ non hanno un corrispondente utente nel database di SchoolMesh (es. _root_, _daemon_, _bin_, _sys_, ecc.); nel database si SchoolMesh la tabella `reserved_username` permette di definire dei nomi utenti riservati, non assegnabili agli utenti
  # alcuni utenti nel database possono non avere alcun account (ad esempio, un docente che non insegna più nella scuola, ma di cui la scuola detiene i piani di lavoro degli anni precedenti); per questi utenti si dovrà impostare il flag `is_active` a false, ma dovranno essere mantenuti nel database; sarà invece possibile rimuovere tutti i loro file dai dischi (ad eccezione di quelli posti in cartelle condivise, come quelli del dipartimento di materia)
  # un account _moodle_ potrebbe essere sospeso o annullato per uno studente che ne ha abusato

=== Gli account Google Apps ===

Per gli account Google Apps, l'uso dei quali prevede l'accettazione di particolari termini di servizio, è necessario predisporre un documento che gli allievi minorenni devono fare firmare a un genitore. In assenza di questo documento, l'account non potrà essere attivato.

=== Creazione degli account ===

Gli account principali (quelli di SchoolMesh) possono essere creati (`/index.php/users/new`) e gestiti (`/index.php/users_`) singolarmente tramite l'apposita pagina di amministrazione, in cui è possibile anche caricare un file in formato CSV contenente i dati degli utenti (vedi esempio nella directory `data/example_uploads`).

Quando i dati vengono importati viene adottato il seguente flusso di lavoro (nel caso più semplice, in cui non ci sono errori o dati duplicati):

  # viene creato un profilo utente (nome, cognome, data e luogo di nascita, sesso, ecc.)
  # viene determinato uno _username_ a partire dal nome e dal cognome e verificato che esso sia compatibile con le regole interne e non sia in conflitto con altri username o username riservati (in questo caso ne viene predisposto uno provvisorio)
  # l'utente viene fatto appartenere al _GuardGroup_ di competenza (_student_, _teacher_, _technician_, ecc.)
  # nel caso di studenti e insegnanti, l'utente viene inserito in un _Team_ (la classe o il dipartimento di materia)

Ai _GuardGroup_ principali (_student_, _teacher_, _technician_, ecc.) corrispondono delle credenziali per i vari tipi di account (definibili nel file _app.yml_). Così, se per il _GuardGroup_ degli studenti è prevista la credenziale _posix_, il singolo studente erediterà questa credenziale.

Finita l'importazione dei dati, saranno quindi presenti nel database di SchoolMesh un certo numero di utenti con alcune credenziali relative agli account, ma ancora senza account effettivi.

A questo punto, si possono lanciare i controlli di coerenza degli account:

  # in primo luogo, per tutti gli utenti che dispongono della credenziale _posix_, ma che non hanno un account _posix_, verrà creato un account "figlio" _posix_, per tutti gli utenti che dispongono della credenziale _samba_ verrà creato un account "figlio" _samba_, ecc. (viene fatto anche il controllo inverso, segnalando come anomalia il fatto che un utente abbia un account "figlio" senza la corrispondente credenziale)
  # in secondo luogo, per tutti gli account "figlio" verranno seguite le regole specifiche per verificare la corrispondenza con il "mondo reale" (nel database c'è scritto che _mario.rossi_ ha un account _posix_ con determinate quote disco impostate e una specifica home directory? bene, verifichiamo se è vero) -- per le mancate corrispondenze vengono proposte delle soluzioni e delle operazioni da compiere.

=== Rimozione di un utente dal database di SchoolMesh ===

Affinché un utente possa essere rimosso dal database interno di SchoolMesh devono essere soddisfatte tutte le seguenti condizioni:

  # non deve comparire come soggetto coinvolto attivamente in progetti scolastici (anche passati)
  # non deve comparire come autore di operazioni nel workflow di qualsiasi attività (ad esempio, non può essere rimosso un dirigente scolastico che ha approvato un piano di lavoro)
  # se è un docente, non deve risultare titolare di alcun insegnamento (anche passato) a cui è legato un piano di lavoro / relazione finale
  # se è uno studente, non deve risultare più iscritto

Inoltre, tutti gli account di quell'utente devono risultare rimossi.

A questo scopo, la funzione _isDeletable()_ relativa ad ogni account "figlio" restituirà un valore affermativo secondo principi diversi, in modo da consentire ai sistemisti di effettuare le operazioni necessarie.

|| *account* || *casi in cui _isDeletable()_ restituisce _false_* || *suggerimenti per il sistemista* ||
|| _posix_ || sono presenti dei file dell'utente || tutti i file dell'utente devono essere rimossi o ne deve essere cambiato il proprietario ||
|| _shell_ || la shell è impostata a _/bin/false_ || impostare la shell a _/bin/false_ ||
|| _samba_ || ??? || ... ||
|| _ldapnfs_ || ??? || ... ||
|| _googleapps_ || esiste ancora l'account sul server di _Google Apps_ || rimuovere prima l'account sul server di _Google Apps_, oppure (se ad esempio lo si vuole mantenere per ex studenti) inserire l'account tra i `reserved_username` ||
|| _moodle_ || esistono interventi importanti nei forum, documenti prodotti, o altro (questo sarà da verificare) || eliminare prima i contenuti indicati sul server che ospita _Moodle_ ||

=== Controlli di coerenza ===

Per ogni account "figlio" possono essere avviati, quando lo si desidera, dei contolli di coerenza con la situazione concreta nei sistemi amministrati.

Per ogni account "figlio" la funzione _getChecks()_ restituirà un insieme di oggetti contenenti l'esito dei controlli effettuati (_passed_, _warning_, _failed_) nonché una descrizione delle operazioni da eseguire per ripristinare la coerenza.

(Nota tecnica: dal punto di vista di SchoolMesh, gli account "figli" sono istanze delle classi PosixAccount, SambaAccount, MoodleAccount, ecc., tutte derivate della classe Account; in questo modo eventuali altri tipi di account potranno essere definiti semplicemente aggiungendo una nuova classe derivata, a patto che implementi i metodi necessari.)

La tabella seguente riassume alcuni dei controlli che vengono fatti:

|| *account* || *controlli* ||
|| _posix_ || esiste l'utente? ha una sua home directory? il campo gecos corrisponde? ha permessi adeguati? ... ||
|| _login_ || l'utente ha una shell corretta? è sospeso? ||
|| _samba_ || l'utente ha un account samba? ||
|| _ldapnfs || l'utente ha un account ldapnfs? ||
|| _googleapps_ || l'utente ha un account Google Apps? ||
|| _moodle_ || l'utente ha un account Moodle? ||


== Dati di prova ==

I file _`data/fixtures/*yml`_ contengono i dati di prova che vengono caricati all'inizio per l'applicazione di test.

Si può cominciare a lavorare con l'applicazione usando gli utenti:

  * _john.test_ (docente)
  * _antonio.d_ (dirigente scolastico)
  * _gabriella.v (dsga)
  * _loris.tissino_ (superadmin)
  * _juri.domodossola_ (admin)



