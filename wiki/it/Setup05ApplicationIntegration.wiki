#summary Integrazione con Samba, Squid, ecc

= Integrazione con Samba, Squid, ecc. =

Si può fare in modo che il logon e il logoff degli utenti autenticati da Samba venga riconosciuto da SchoolMesh in quella che viene chiamata "autenticazione leggera".

In pratica, è sufficiente aggiungere nel file _sbm.conf_ delle righe che dicono quale operazione fare al momento dell'accesso alla home directory.

{{{
[homes]
  ... 
	root preexec =  /usr/bin/wget --no-check-certificate --post-data 'token=AtOkEn2kIp' https://schoolmeshserver/schoolmesh/index.php/lanlogon/username/%U/ip/%I/workstation/%m -O /tmp/logon%U.%m.%I.html
	root postexec = /usr/bin/wget --no-check-certificate --post-data 'token=AtOkEn2kIp' https://schoolmeshserver/schoolmesh/index.php/lanlogoff/username/%U/ip/%I/workstation/%m -O /tmp/logoff%U.%m.%I.html 

}}}

Così facendo, al logon e al logoff su una macchina della rete locale, viene invocata l'applicazione web con un POST ad un indirizzo come il seguente:

{{{
  https://schoolmeshserver/schoolmesh/index.php/lanlogoff/username/filippo.monti/ip/192.168.1.12/workstation/pc12labinf1
}}}

Il POST contiene un token segreto, che deve corrispondere a quello indicato nel file _app.yml_.

Se !SchoolMesh viene usata per abilitare/disabilitare l'accesso a Internet, l'attivazione/disattivazione avviene automaticamente, per la postazione in uso, quando un docente fa il logon su una macchina.

== Configurazione quote disco ==

Per far sì che le quote disco siano gestibili, bisogna impostare nel file _/etc/fstab_, per la directory home, l'opzione _usrquota_.

Se si vogliono anche le ACL, bisogna impostare l'opzione _acl_.

Esempio:

{{{
# /dev/sdb5
UUID=73c413d6-a6d6-4279-ad84-0255d1db83de /home ext3 relatime,defaults,usrquota,acl       0       2
}}}

== Configurazione di !SwiftMail ==

I messaggi di posta elettronica in uscita vengono spediti tramite l'uso di !SwiftMail.

Esistono diverse possibilità di configurazione, per le quali si rimanda a:
http://www.symfony-project.org/more-with-symfony/1_4/en/04-Emails

Per attivare la spedizione tramite _spool_ si deve agire sul file _/apps/frontend/config/factories.yml_, indicando quale server di posta usare, in che directory tenere lo _spool_ ecc. Segue un esempio di configurazione che prevede l'uso di gmail per la spedizione dei messaggi, e una directory di spool (che va creato e per i quali deve avere i permessi di scrittura sia l'utente www-data sia l'utente che avvia i task).

{{{
default:
  mailer:
    class: sfMailer
    param:
      logging:           %SF_LOGGING_ENABLED%
      charset:           %SF_CHARSET%
      delivery_strategy: spool
      spool_class:     Swift_FileSpool
      spool_arguments:   [ /var/spool/swiftmail ]  
      transport:
        class: Swift_SmtpTransport
        param:
          host:      smtp.gmail.com
          port:       465
          encryption: ssl
          username:   one.user@gmail.com 
          password:   ADiffikultPazzword
}}}

Se si imposta la modalità di spedizione _spool_, bisogna ricordarsi di impostare in crontab l'esecuzione del comando per spedire effettivamente i messaggi:

{{{
symfony project:send-emails
}}}

